// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: protoc/peoples/peoples.proto

package peoples

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PeoplesService_UpdatePeople_FullMethodName = "/characters.PeoplesService/UpdatePeople"
)

// PeoplesServiceClient is the client API for PeoplesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeoplesServiceClient interface {
	UpdatePeople(ctx context.Context, in *UpdatePeopleRequest, opts ...grpc.CallOption) (*UpdatePeopleResponse, error)
}

type peoplesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeoplesServiceClient(cc grpc.ClientConnInterface) PeoplesServiceClient {
	return &peoplesServiceClient{cc}
}

func (c *peoplesServiceClient) UpdatePeople(ctx context.Context, in *UpdatePeopleRequest, opts ...grpc.CallOption) (*UpdatePeopleResponse, error) {
	out := new(UpdatePeopleResponse)
	err := c.cc.Invoke(ctx, PeoplesService_UpdatePeople_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeoplesServiceServer is the server API for PeoplesService service.
// All implementations should embed UnimplementedPeoplesServiceServer
// for forward compatibility
type PeoplesServiceServer interface {
	UpdatePeople(context.Context, *UpdatePeopleRequest) (*UpdatePeopleResponse, error)
}

// UnimplementedPeoplesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPeoplesServiceServer struct {
}

func (UnimplementedPeoplesServiceServer) UpdatePeople(context.Context, *UpdatePeopleRequest) (*UpdatePeopleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePeople not implemented")
}

// UnsafePeoplesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeoplesServiceServer will
// result in compilation errors.
type UnsafePeoplesServiceServer interface {
	mustEmbedUnimplementedPeoplesServiceServer()
}

func RegisterPeoplesServiceServer(s grpc.ServiceRegistrar, srv PeoplesServiceServer) {
	s.RegisterService(&PeoplesService_ServiceDesc, srv)
}

func _PeoplesService_UpdatePeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePeopleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeoplesServiceServer).UpdatePeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeoplesService_UpdatePeople_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeoplesServiceServer).UpdatePeople(ctx, req.(*UpdatePeopleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeoplesService_ServiceDesc is the grpc.ServiceDesc for PeoplesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeoplesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "characters.PeoplesService",
	HandlerType: (*PeoplesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePeople",
			Handler:    _PeoplesService_UpdatePeople_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/peoples/peoples.proto",
}
