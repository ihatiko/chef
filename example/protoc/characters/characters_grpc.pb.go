// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: protoc/characters/characters.proto

package characters

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CharactersService_UpdateCharacter_FullMethodName = "/characters.CharactersService/UpdateCharacter"
)

// CharactersServiceClient is the client API for CharactersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharactersServiceClient interface {
	UpdateCharacter(ctx context.Context, in *UpdateCharactersRequest, opts ...grpc.CallOption) (*UpdateCharactersResponse, error)
}

type charactersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharactersServiceClient(cc grpc.ClientConnInterface) CharactersServiceClient {
	return &charactersServiceClient{cc}
}

func (c *charactersServiceClient) UpdateCharacter(ctx context.Context, in *UpdateCharactersRequest, opts ...grpc.CallOption) (*UpdateCharactersResponse, error) {
	out := new(UpdateCharactersResponse)
	err := c.cc.Invoke(ctx, CharactersService_UpdateCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharactersServiceServer is the server API for CharactersService service.
// All implementations should embed UnimplementedCharactersServiceServer
// for forward compatibility
type CharactersServiceServer interface {
	UpdateCharacter(context.Context, *UpdateCharactersRequest) (*UpdateCharactersResponse, error)
}

// UnimplementedCharactersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCharactersServiceServer struct {
}

func (UnimplementedCharactersServiceServer) UpdateCharacter(context.Context, *UpdateCharactersRequest) (*UpdateCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCharacter not implemented")
}

// UnsafeCharactersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharactersServiceServer will
// result in compilation errors.
type UnsafeCharactersServiceServer interface {
	mustEmbedUnimplementedCharactersServiceServer()
}

func RegisterCharactersServiceServer(s grpc.ServiceRegistrar, srv CharactersServiceServer) {
	s.RegisterService(&CharactersService_ServiceDesc, srv)
}

func _CharactersService_UpdateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).UpdateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharactersService_UpdateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).UpdateCharacter(ctx, req.(*UpdateCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharactersService_ServiceDesc is the grpc.ServiceDesc for CharactersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharactersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "characters.CharactersService",
	HandlerType: (*CharactersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCharacter",
			Handler:    _CharactersService_UpdateCharacter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/characters/characters.proto",
}
